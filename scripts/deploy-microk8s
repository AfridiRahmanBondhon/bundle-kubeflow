#!/usr/bin/env python3

"""Deploys Kubeflow onto Microk8s"""

import argparse
import importlib
import json
import subprocess
import textwrap
import time
from glob import glob
from typing import List

common = importlib.import_module('common', 'common.py')
run = common.run
require = common.require
get_output = common.get_output


def parse_args():
    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest='command', help='foo')
    subparser.required = True
    create_args = subparser.add_parser('create')
    destroy_args = subparser.add_parser('destroy')

    create_args.add_argument('--cloud', default='microk8s', help='')
    create_args.add_argument('--controller', default='uk8s', help='')
    create_args.add_argument('--model', default='kubeflow', help='')
    create_args.add_argument('--channel', default='stable', help='')
    create_args.add_argument('--build', action='store_true', default=False, help='')
    create_args.add_argument('--ci', action='store_true', default=False, help='')

    destroy_args.add_argument('controller', default='uk8s', help='The controller to destroy')
    destroy_args.add_argument(
        'args', nargs='*', help='Arguments passed on to `juju destroy-controller`'
    )

    return parser.parse_args()


def create(cloud: str, controller: str, model: str, channel: str, build: bool, ci: bool):
    """Create CDK on given cloud."""

    require(
        'juju',
        'juju-wait',
        'juju-helpers.juju-kubectl',
        'juju-helpers.juju-bundle',
        'microk8s.enable',
    )

    start = time.time()

    # Set up juju and microk8s to play nicely together
    run('microk8s.enable', 'dns', 'storage', 'dashboard')

    print('Waiting for microk8s to be ready...')
    for i in range(5):
        try:
            subprocess.run(['microk8s.status', '--wait-ready', '--timeout', '60'], check=True)
        except subprocess.CalledProcessError:
            print('microk8s not yet ready.')
            time.sleep(12)
        else:
            break

    run('juju', 'bootstrap', cloud, controller)
    run('juju', 'add-model', model, cloud)
    run(
        'juju',
        'create-storage-pool',
        'operator-storage',
        'kubernetes',
        'storage-class=microk8s-hostpath',
    )

    # Allow building local bundle.yaml, otherwise deploy from the charm store
    if build:
        args = ['juju', 'bundle', 'deploy', '--build'] + (
            ['--', '--overlay', 'overlays/ci.yml'] if ci else []
        )
        run(*args)
    else:
        run('juju', 'deploy', 'kubeflow', '--channel', channel)

    run('juju', 'wait', '-vw')

    # General Kubernetes setup.
    for f in glob('charms/*/files/sa.yaml') + glob('charms/*/files/secret.yaml'):
        run('juju', 'kubectl', 'create', '-f', f, check=False)

    run('juju', 'config', 'ambassador', 'juju-external-hostname=localhost')
    run('juju', 'expose', 'ambassador')

    status = json.loads(
        get_output('juju', 'status', '-m', f'{controller}:{model}', '--format', 'json')
    )
    pub_ip = status['applications']['ambassador']['units']['ambassador/0']['address']

    end = time.time()
    print(
        textwrap.dedent(
            f"""
    Congratulations, Kubeflow is now available. Took {end - start:0.2f} seconds.

    Run `microk8s.kubectl proxy` to be able to access the dashboard at

    http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace={model}

    The central dashboard is available at http://{pub_ip}/

    To tear down Kubeflow and associated infrastructure, run this command:

    ./scripts/deploy-microk8s destroy {controller}

    For more information, see documentation at:

    https://github.com/juju-solutions/bundle-kubeflow/blob/master/README.md

    """
        )
    )


def destroy(controller: str, args: List[str]):
    """Destroy given controller."""

    require('juju')

    run('juju', 'destroy-controller', controller, *args)


if __name__ == '__main__':
    parsed = parse_args()

    if parsed.command == 'create':
        create(
            parsed.cloud, parsed.controller, parsed.model, parsed.channel, parsed.build, parsed.ci
        )
    elif parsed.command == 'destroy':
        destroy(parsed.controller, parsed.args)
